/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ai.chess;

import Pieces.PieceColor;
import javax.swing.*;
import java.awt.*;
import static ai.chess.AIChess.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.Serializable;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author omarashour
 */
public class GameBoard extends javax.swing.JFrame implements Serializable {

    /**
     * Creates new form GameBoard
     */
    SingleBoardPanel singleBoardPanel = null;
    MultiBoardPanel multiBoardPanel = null;
    int verboseCounter = 0;

    private Timer verboseTimer;

    public GameBoard(SingleBoardPanel boardPanel) {
        initComponents();
        verboseTimer = new Timer(1, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {

                    verboseTextArea.setText(verboseTextArea.getText() + verboseStrings.get(verboseCounter) + "\n");
                    verboseCounter++;
                } catch (Exception ex) {

                }
            }
        });

        verboseTimer.start();
        this.singleBoardPanel = boardPanel;
        boardPanel.setBounds(0, 0, 500, 500);
        add(singleBoardPanel);
        this.setLocationRelativeTo(null);

    }

    public GameBoard(MultiBoardPanel boardPanel) {
        initComponents();
        playAIButton.setVisible(false);
        verboseTimer = new Timer(1, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {

                    verboseTextArea.setText(verboseTextArea.getText() + verboseStrings.get(verboseCounter) + "\n");
                    verboseCounter++;
                } catch (Exception ex) {

                }
            }
        });

        verboseTimer.start();
        this.multiBoardPanel = boardPanel;
        boardPanel.setBounds(0, 0, 500, 500);
        add(multiBoardPanel);
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        verboseTextArea = new javax.swing.JTextArea();
        playAIButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        saveButton.setText("Save Board");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        verboseTextArea.setEditable(false);
        verboseTextArea.setColumns(20);
        verboseTextArea.setRows(5);
        jScrollPane1.setViewportView(verboseTextArea);

        playAIButton.setFont(new java.awt.Font("Ubuntu", 3, 14)); // NOI18N
        playAIButton.setForeground(new java.awt.Color(255, 51, 51));
        playAIButton.setText("Play The AI Step");
        playAIButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAIButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(185, 185, 185)
                        .addComponent(playAIButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 365, Short.MAX_VALUE)
                        .addComponent(saveButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(playAIButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            // TODO add your handling code here:
            if (singleBoardPanel != null) {
                savedPanelsList.add(new SavedPanel(singleBoardPanel.chessBoard, isPlayerWhite, "Singleplayer", singleBoardPanel.canPlayerPlay));
            }

            if (multiBoardPanel != null) {
                savedPanelsList.add(new SavedPanel(multiBoardPanel.chessBoard, isPlayerWhite, "Multiplayer", multiBoardPanel.whitePlayerTurn));

            }
            PanelsReaderWriter.save();
//            PanelsReaderWriter.load();
        } catch (IOException ex) {
            Logger.getLogger(GameBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(GameBoard.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void playAIButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAIButtonActionPerformed
        // TODO add your handling code here:
        
        
        if (!singleBoardPanel.canPlayerPlay) {
        playAIButton.setEnabled(false);

                    try {
                        try {
                            if (isPlayerWhite) {
                                if (singleBoardPanel.chessBoard.checkMate(PieceColor.Black)) {
                                    JOptionPane.showMessageDialog(null, PieceColor.White + " Wins");
                                    System.exit(0);
                                } else if (singleBoardPanel.chessBoard.checkMate(PieceColor.White)) {
                                    JOptionPane.showMessageDialog(null, PieceColor.Black + " Wins");
                                    System.exit(0);
                                }
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(SingleBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        singleBoardPanel.availableMoves.clear();
                        singleBoardPanel.setChessBoard(singleBoardPanel.boardController.BoardToDraw(singleBoardPanel.chessBoard));
                        verboseStrings.add("Branching Factor : " + singleBoardPanel.boardController.GetNPluesOneNodes() / singleBoardPanel.boardController.GetNNodes());
                        singleBoardPanel.canPlayerPlay = true;

                    } catch (Exception ex) {
                        Logger.getLogger(SingleBoardPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    System.out.println("Branching Factor : " + singleBoardPanel.boardController.GetNPluesOneNodes() / singleBoardPanel.boardController.GetNNodes());
                    singleBoardPanel.canPlayerPlay = true;

                }else{
            JOptionPane.showMessageDialog(null, "Play your step first !!!");
        }
        
                playAIButton.setEnabled(true);

        
//        singleBoardPanel.canPlayerPlay=true;
        
    }//GEN-LAST:event_playAIButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton playAIButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextArea verboseTextArea;
    // End of variables declaration//GEN-END:variables
}
